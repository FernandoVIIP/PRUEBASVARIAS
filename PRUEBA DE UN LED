import RPi.GPIO as GPIO
import time

# Configuración de los pines
Pin_Sensor = 5  # Pin GPIO para la señal del sensor de obstáculos
Pin_Led = 25    # Pin GPIO para el LED

# Configuración de la biblioteca RPi.GPIO
GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO

# Configurar el pin del sensor como entrada y el pin del LED como salida
GPIO.setup(Pin_Sensor, GPIO.IN)
GPIO.setup(Pin_Led, GPIO.OUT)

try:
    while True:
        sensor_state = GPIO.input(Pin_Sensor)
        if sensor_state == 0:  # Si el sensor detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.HIGH)  # Encender el LED
        else:  # Si el sensor no detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.LOW)   # Apagar el LED
        
        time.sleep(0.1)  # Pequeña pausa para evitar una carga excesiva de la CPU

except KeyboardInterrupt:
    pass  # Permitir salir del bucle con Ctrl+C

finally:
    GPIO.cleanup()  # Limpiar la configuración de los pines GPIO


# ESTA ES LA PRUEBA EN LA RASPERRY CON UN LED Y UN INFRARROJO



import RPi.GPIO as GPIO
import MFRC522
import signal
import time

# Configura los pines GPIO
servo_pin = 17
led_pin = 18

GPIO.setmode(GPIO.BCM)
GPIO.setup(servo_pin, GPIO.OUT)
GPIO.setup(led_pin, GPIO.OUT)

# Configura el lector RFID
MIFAREReader = MFRC522.MFRC522()

# ID de la tarjeta permitida
authorized_card_id = [0xCB, 0xD7, 0xBA, 0x79]  # ID en formato hexadecimal

try:
    while True:
        # Lógica de lectura RFID
        (status, TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)
        if status == MIFAREReader.MI_OK:
            print("Tarjeta detectada")

            # Obtener ID de la tarjeta
            (status, uid) = MIFAREReader.MFRC522_Anticoll()

            # Verificar si es el ID deseado
            if uid == authorized_card_id:
                print("Acceso permitido")
                
                # Activar servo a 180 grados
                p = GPIO.PWM(servo_pin, 50)
                p.start(2.5)  # Posición inicial del servo
                p.ChangeDutyCycle(7.5)  # Gira a 180 grados
                time.sleep(1)
                
                # Encender el LED
                GPIO.output(led_pin, GPIO.HIGH)
                time.sleep(3)
                GPIO.output(led_pin, GPIO.LOW)
                
                p.stop()  # Detener el servo
            else:
                print("Acceso denegado")
        
        time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()




#

import tkinter as tk

class EstacionamientoGUI:
    def _init_(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")

        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.docentes_frame, 5, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 5, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 5, "A")

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        for i in range(cantidad):
            cajon_texto = tipo + str(i+1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajon.bind("<Button-1>", lambda event, widget=cajon: self.cambiar_estado(widget))

    def cambiar_estado(sensor_state, cajon):
        color_actual = cajon.cget("bg")
        nuevo_color = "red" if color_actual == "green" else "green"
        cajon.config(bg=nuevo_color)

if _name_ == "_main_":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop()



########

# Configurar el pin del sensor como entrada y el pin del LED como salida
GPIO.setup(Pin_Sensor, GPIO.IN)
GPIO.setup(Pin_Led, GPIO.OUT)




class EstacionamientoGUI:
    def init(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")

        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.docentes_frame, 5, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 5, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 5, "A")

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        for i in range(cantidad):
            cajon_texto = tipo + str(i+1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajon.bind("<Button-1>", lambda event, widget=cajon: self.cambiar_estado(widget))

    def cambiar_estado(sensor_state, cajon):
        color_actual = cajon.cget("bg")
        nuevo_color = "red" if color_actual == "green" else "green"
        cajon.config(bg=nuevo_color)

if name == "main":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
try:
    while True:
        sensor_state = GPIO.input(Pin_Sensor)
        if sensor_state == 0:  # Si el sensor detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.HIGH)  # Encender el LED
        else:  # Si el sensor no detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.LOW)   # Apagar el LED
        
        time.sleep(0.1)  # Pequeña pausa para evitar una carga excesiva de la CPU

except KeyboardInterrupt:
    pass  # Permitir salir del bucle con Ctrl+C

finally:
    GPIO.cleanup()  # Limpiar la configuración de los pines GPIO
    root.mainloop()
