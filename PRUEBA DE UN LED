fernando19q@outlook.com

import RPi.GPIO as GPIO
import time

# Configuración de los pines
Pin_Sensor = 5  # Pin GPIO para la señal del sensor de obstáculos
Pin_Led = 25    # Pin GPIO para el LED

# Configuración de la biblioteca RPi.GPIO
GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO

# Configurar el pin del sensor como entrada y el pin del LED como salida
GPIO.setup(Pin_Sensor, GPIO.IN)
GPIO.setup(Pin_Led, GPIO.OUT)

try:
    while True:
        sensor_state = GPIO.input(Pin_Sensor)
        if sensor_state == 0:  # Si el sensor detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.HIGH)  # Encender el LED
        else:  # Si el sensor no detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.LOW)   # Apagar el LED
        
        time.sleep(0.1)  # Pequeña pausa para evitar una carga excesiva de la CPU

except KeyboardInterrupt:
    pass  # Permitir salir del bucle con Ctrl+C

finally:
    GPIO.cleanup()  # Limpiar la configuración de los pines GPIO


# ESTA ES LA PRUEBA EN LA RASPERRY CON UN LED Y UN INFRARROJO



import RPi.GPIO as GPIO
import MFRC522
import signal
import time

# Configura los pines GPIO
servo_pin = 17
led_pin = 18

GPIO.setmode(GPIO.BCM)
GPIO.setup(servo_pin, GPIO.OUT)
GPIO.setup(led_pin, GPIO.OUT)

# Configura el lector RFID
MIFAREReader = MFRC522.MFRC522()

# ID de la tarjeta permitida
authorized_card_id = [0xCB, 0xD7, 0xBA, 0x79]  # ID en formato hexadecimal

try:
    while True:
        # Lógica de lectura RFID
        (status, TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)
        if status == MIFAREReader.MI_OK:
            print("Tarjeta detectada")

            # Obtener ID de la tarjeta
            (status, uid) = MIFAREReader.MFRC522_Anticoll()

            # Verificar si es el ID deseado
            if uid == authorized_card_id:
                print("Acceso permitido")
                
                # Activar servo a 180 grados
                p = GPIO.PWM(servo_pin, 50)
                p.start(2.5)  # Posición inicial del servo
                p.ChangeDutyCycle(7.5)  # Gira a 180 grados
                time.sleep(1)
                
                # Encender el LED
                GPIO.output(led_pin, GPIO.HIGH)
                time.sleep(3)
                GPIO.output(led_pin, GPIO.LOW)
                
                p.stop()  # Detener el servo
            else:
                print("Acceso denegado")
        
        time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()




#

import tkinter as tk

class EstacionamientoGUI:
    def _init_(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")

        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.docentes_frame, 5, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 5, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 5, "A")

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        for i in range(cantidad):
            cajon_texto = tipo + str(i+1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajon.bind("<Button-1>", lambda event, widget=cajon: self.cambiar_estado(widget))

    def cambiar_estado(sensor_state, cajon):
        color_actual = cajon.cget("bg")
        nuevo_color = "red" if color_actual == "green" else "green"
        cajon.config(bg=nuevo_color)

if _name_ == "_main_":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop()



########

# Configurar el pin del sensor como entrada y el pin del LED como salida
GPIO.setup(Pin_Sensor, GPIO.IN)
GPIO.setup(Pin_Led, GPIO.OUT)




class EstacionamientoGUI:
    def init(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")

        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.docentes_frame, 5, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 5, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 5, "A")

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        for i in range(cantidad):
            cajon_texto = tipo + str(i+1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajon.bind("<Button-1>", lambda event, widget=cajon: self.cambiar_estado(widget))

    def cambiar_estado(sensor_state, cajon):
        color_actual = cajon.cget("bg")
        nuevo_color = "red" if color_actual == "green" else "green"
        cajon.config(bg=nuevo_color)

if name == "main":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
try:
    while True:
        sensor_state = GPIO.input(Pin_Sensor)
        if sensor_state == 0:  # Si el sensor detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.HIGH)  # Encender el LED
        else:  # Si el sensor no detecta un obstáculo
            GPIO.output(Pin_Led, GPIO.LOW)   # Apagar el LED
        
        time.sleep(0.1)  # Pequeña pausa para evitar una carga excesiva de la CPU

except KeyboardInterrupt:
    pass  # Permitir salir del bucle con Ctrl+C

finally:
    GPIO.cleanup()  # Limpiar la configuración de los pines GPIO
    root.mainloop()








#4 INFRARROJOS Y 4 LEDS




import RPi.GPIO as GPIO
import time

# Configuración de los pines
Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1
Pin_Sensor2 = 6   # Pin GPIO para la señal del sensor de obstáculos 2
Pin_Sensor3 = 13  # Pin GPIO para la señal del sensor de obstáculos 3
Pin_Sensor4 = 19  # Pin GPIO para la señal del sensor de obstáculos 4

Pin_Led1 = 25     # Pin GPIO para el LED 1
Pin_Led2 = 12     # Pin GPIO para el LED 2
Pin_Led3 = 16     # Pin GPIO para el LED 3
Pin_Led4 = 20     # Pin GPIO para el LED 4

# Configuración de la biblioteca RPi.GPIO
GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO

# Configurar los pines de los sensores como entrada y los pines de los LEDs como salida
GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Sensor2, GPIO.IN)
GPIO.setup(Pin_Sensor3, GPIO.IN)
GPIO.setup(Pin_Sensor4, GPIO.IN)

GPIO.setup(Pin_Led1, GPIO.OUT)
GPIO.setup(Pin_Led2, GPIO.OUT)
GPIO.setup(Pin_Led3, GPIO.OUT)
GPIO.setup(Pin_Led4, GPIO.OUT)

try:
    while True:
        # Leer el estado de cada sensor
        sensor_state1 = GPIO.input(Pin_Sensor1)
        sensor_state2 = GPIO.input(Pin_Sensor2)
        sensor_state3 = GPIO.input(Pin_Sensor3)
        sensor_state4 = GPIO.input(Pin_Sensor4)
        
        # Controlar cada LED según el estado de su sensor correspondiente
        GPIO.output(Pin_Led1, GPIO.LOW if sensor_state1 == 0 else GPIO.HIGH)
        GPIO.output(Pin_Led2, GPIO.LOW if sensor_state2 == 0 else GPIO.HIGH)
        GPIO.output(Pin_Led3, GPIO.LOW if sensor_state3 == 0 else GPIO.HIGH)
        GPIO.output(Pin_Led4, GPIO.LOW if sensor_state4 == 0 else GPIO.HIGH)
        
        time.sleep(0.1)  # Pequeña pausa para evitar una carga excesiva de la CPU

except KeyboardInterrupt:
    pass  # Permitir salir del bucle con Ctrl+C

finally:
    GPIO.cleanup()  # Limpiar la configuración de los pines GPIO






#programaxion que hizo el profe pedro




import tkinter as tk
import RPi.GPIO as GPIO
import time

Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1

Pin_Led1 = 25     # Pin GPIO para el LED 1

GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO

GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Led1, GPIO.OUT)
sensor_state1D = GPIO.input(Pin_Sensor1)

GPIO.setwarnings(False)

class EstacionamientoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")
        
        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.docentes_frame, 1, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 2, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 1, "A")

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        for i in range(cantidad):
            #cajon_texto = tipo + str(i+1)
            #cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            #cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            #print(cajon)
            print(sensor_state1D)
            if sensor_state1D == 0:
                cajon_texto = tipo + str(i+1)
                cajon = tk.Label(labelframe(2), text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="red", font=("Arial", 10, "bold"))
                cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
                print(frame)
            else:
                cajon_texto = tipo + str(i+1)
                cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
                cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
                print(frame)
                #cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="red", font=("Arial", 10, "bold"))
            #cajon.bind("<Button-1>", lambda event, widget=cajon: self.cambiar_estado(widget))

    def cambiar_estado(self, cajon):
        color_actual = cajon.cget("bg")
        nuevo_color = "red" if color_actual == "green" else "green"
        cajon.config(bg=nuevo_color)

if __name__ == "__main__":
    root = tk.Tk()
    app = EstacionamientoGUI(root) #root para crear la ventana
    root.mainloop()




#OTTA PRUEBA

import tkinter as tk
import RPi.GPIO as GPIO

Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1
Pin_Led1 = 25     # Pin GPIO para el LED 1

GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO
GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Led1, GPIO.OUT)
GPIO.setwarnings(False)

class EstacionamientoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")
        
        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.docentes_cajones = self.crear_cajones_estacionamiento(self.docentes_frame, 1, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.estudiantes_cajones = self.crear_cajones_estacionamiento(self.estudiantes_frame, 2, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.administrativos_cajones = self.crear_cajones_estacionamiento(self.administrativos_frame, 1, "A")
        
        self.actualizar_cajones()

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        cajones = []
        for i in range(cantidad):
            cajon_texto = tipo + str(i + 1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajones.append(cajon)
        return cajones

    def actualizar_cajones(self):
        sensor_state1D = GPIO.input(Pin_Sensor1)
        for cajon in self.docentes_cajones + self.estudiantes_cajones + self.administrativos_cajones:
            nuevo_color = "red" if sensor_state1D == 0 else "green"
            cajon.config(bg=nuevo_color)
        self.root.after(1000, self.actualizar_cajones)  # Actualiza cada segundo

if __name__ == "__main__":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop() #ESTE CODIGO SI JALO 





#OTRA PRUEBA USANDO AHORA UN LED Y UN INFRARROJO CON LA INTERFAZ 



  import tkinter as tk
import RPi.GPIO as GPIO

Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1
Pin_Led1 = 25     # Pin GPIO para el LED 1

GPIO.setmode(GPIO.BCM)  # Usar numeración BCM de los pines GPIO
GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Led1, GPIO.OUT)
GPIO.setwarnings(False)

class EstacionamientoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")
        
        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.docentes_cajones = self.crear_cajones_estacionamiento(self.docentes_frame, 1, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.estudiantes_frame, 2, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.crear_cajones_estacionamiento(self.administrativos_frame, 1, "A")
        
        self.actualizar_cajones()

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        cajones = []
        for i in range(cantidad):
            cajon_texto = tipo + str(i + 1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajones.append(cajon)
        return cajones

    def actualizar_cajones(self):
        sensor_state1D = GPIO.input(Pin_Sensor1)
        nuevo_color = "red" if sensor_state1D == 0 else "green"
        self.docentes_cajones[0].config(bg=nuevo_color)

        # Control del LED basado en el estado del sensor
        if sensor_state1D == 0:
            GPIO.output(Pin_Led1, GPIO.LOW)  # Apagar LED
        else:
            GPIO.output(Pin_Led1, GPIO.HIGH)  # Encender LED
        
        self.root.after(1000, self.actualizar_cajones)  # Actualiza cada segundo

if __name__ == "__main__":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop()  




#PRUEBA AHORA CON 4 LEDS Y 4 INFRARROJOS CON LA INTERFAZ 



import tkinter as tk
import RPi.GPIO as GPIO

# Pines GPIO para los sensores y LEDs
Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1 (Docentes)
Pin_Led1 = 25     # Pin GPIO para el LED 1 (Docentes)

Pin_Sensor2 = 6   # Pin GPIO para la señal del sensor de obstáculos 2 (Estudiantes)
Pin_Led2 = 26     # Pin GPIO para el LED 2 (Estudiantes)

Pin_Sensor3 = 13  # Pin GPIO para la señal del sensor de obstáculos 3 (Estudiantes)
Pin_Led3 = 19     # Pin GPIO para el LED 3 (Estudiantes)

Pin_Sensor4 = 20  # Pin GPIO para la señal del sensor de obstáculos 4 (Administrativos)
Pin_Led4 = 21     # Pin GPIO para el LED 4 (Administrativos)

# Configuración de los pines GPIO
GPIO.setmode(GPIO.BCM)  
GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Led1, GPIO.OUT)
GPIO.setup(Pin_Sensor2, GPIO.IN)
GPIO.setup(Pin_Led2, GPIO.OUT)
GPIO.setup(Pin_Sensor3, GPIO.IN)
GPIO.setup(Pin_Led3, GPIO.OUT)
GPIO.setup(Pin_Sensor4, GPIO.IN)
GPIO.setup(Pin_Led4, GPIO.OUT)
GPIO.setwarnings(False)

class EstacionamientoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")
        
        # Cajones para docentes
        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.docentes_cajones = self.crear_cajones_estacionamiento(self.docentes_frame, 1, "D")

        # Cajones para estudiantes
        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.estudiantes_cajones = self.crear_cajones_estacionamiento(self.estudiantes_frame, 2, "E")

        # Cajones para administrativos
        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"))
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.administrativos_cajones = self.crear_cajones_estacionamiento(self.administrativos_frame, 1, "A")
        
        self.actualizar_cajones()

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        cajones = []
        for i in range(cantidad):
            cajon_texto = tipo + str(i + 1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajones.append(cajon)
        return cajones

    def actualizar_cajones(self):
        # Estado y color del cajón de Docentes
        sensor_state1D = GPIO.input(Pin_Sensor1)
        nuevo_color_docentes = "red" if sensor_state1D == 0 else "green"
        self.docentes_cajones[0].config(bg=nuevo_color_docentes)
        GPIO.output(Pin_Led1, GPIO.LOW if sensor_state1D == 0 else GPIO.HIGH)

        # Estado y color de los cajones de Estudiantes
        sensor_state2E = GPIO.input(Pin_Sensor2)
        nuevo_color_estudiantes_1 = "red" if sensor_state2E == 0 else "green"
        self.estudiantes_cajones[0].config(bg=nuevo_color_estudiantes_1)
        GPIO.output(Pin_Led2, GPIO.LOW if sensor_state2E == 0 else GPIO.HIGH)

        sensor_state3E = GPIO.input(Pin_Sensor3)
        nuevo_color_estudiantes_2 = "red" if sensor_state3E == 0 else "green"
        self.estudiantes_cajones[1].config(bg=nuevo_color_estudiantes_2)
        GPIO.output(Pin_Led3, GPIO.LOW if sensor_state3E == 0 else GPIO.HIGH)

        # Estado y color del cajón de Administrativos
        sensor_state4A = GPIO.input(Pin_Sensor4)
        nuevo_color_administrativos = "red" if sensor_state4A == 0 else "green"
        self.administrativos_cajones[0].config(bg=nuevo_color_administrativos)
        GPIO.output(Pin_Led4, GPIO.LOW if sensor_state4A == 0 else GPIO.HIGH)
        
        self.root.after(1000, self.actualizar_cajones)  # Actualiza cada segundo

if __name__ == "__main__":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop()




#AHORA CON IMAGEN DE FONDO SEGÚN 



import tkinter as tk
from PIL import Image, ImageTk
import RPi.GPIO as GPIO

# Pines GPIO para los sensores y LEDs
Pin_Sensor1 = 5   # Pin GPIO para la señal del sensor de obstáculos 1 (Docentes)
Pin_Led1 = 25     # Pin GPIO para el LED 1 (Docentes)

Pin_Sensor2 = 6   # Pin GPIO para la señal del sensor de obstáculos 2 (Estudiantes)
Pin_Led2 = 26     # Pin GPIO para el LED 2 (Estudiantes)

Pin_Sensor3 = 13  # Pin GPIO para la señal del sensor de obstáculos 3 (Estudiantes)
Pin_Led3 = 19     # Pin GPIO para el LED 3 (Estudiantes)

Pin_Sensor4 = 20  # Pin GPIO para la señal del sensor de obstáculos 4 (Administrativos)
Pin_Led4 = 21     # Pin GPIO para el LED 4 (Administrativos)

# Configuración de los pines GPIO
GPIO.setmode(GPIO.BCM)  
GPIO.setup(Pin_Sensor1, GPIO.IN)
GPIO.setup(Pin_Led1, GPIO.OUT)
GPIO.setup(Pin_Sensor2, GPIO.IN)
GPIO.setup(Pin_Led2, GPIO.OUT)
GPIO.setup(Pin_Sensor3, GPIO.IN)
GPIO.setup(Pin_Led3, GPIO.OUT)
GPIO.setup(Pin_Sensor4, GPIO.IN)
GPIO.setup(Pin_Led4, GPIO.OUT)
GPIO.setwarnings(False)

class EstacionamientoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Estacionamiento - Universidad Politécnica de Tapachula")

        # Cargar la imagen de fondo
        self.bg_image = Image.open("background.jpg")
        self.bg_image = self.bg_image.resize((800, 600), Image.ANTIALIAS)
        self.bg_photo = ImageTk.PhotoImage(self.bg_image)

        self.background_label = tk.Label(self.root, image=self.bg_photo)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

        # Crear frames para los cajones
        self.docentes_frame = tk.LabelFrame(self.root, text="Docentes", padx=30, pady=30, font=("Arial", 12, "bold"), bg="#f0f0f0")
        self.docentes_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.docentes_cajones = self.crear_cajones_estacionamiento(self.docentes_frame, 1, "D")

        self.estudiantes_frame = tk.LabelFrame(self.root, text="Estudiantes", padx=30, pady=30, font=("Arial", 12, "bold"), bg="#f0f0f0")
        self.estudiantes_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.estudiantes_cajones = self.crear_cajones_estacionamiento(self.estudiantes_frame, 2, "E")

        self.administrativos_frame = tk.LabelFrame(self.root, text="Administrativos", padx=30, pady=30, font=("Arial", 12, "bold"), bg="#f0f0f0")
        self.administrativos_frame.grid(row=0, column=2, padx=20, pady=20, sticky="nsew")
        self.administrativos_cajones = self.crear_cajones_estacionamiento(self.administrativos_frame, 1, "A")

        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_columnconfigure(2, weight=1)

        self.actualizar_cajones()

    def crear_cajones_estacionamiento(self, frame, cantidad, tipo):
        cajones = []
        for i in range(cantidad):
            cajon_texto = tipo + str(i + 1)
            cajon = tk.Label(frame, text=cajon_texto, padx=40, pady=40, relief=tk.RAISED, borderwidth=2, bg="green", font=("Arial", 10, "bold"))
            cajon.grid(row=i // 2, column=i % 2, padx=15, pady=15)
            cajones.append(cajon)
        return cajones

    def actualizar_cajones(self):
        # Estado y color del cajón de Docentes
        sensor_state1D = GPIO.input(Pin_Sensor1)
        nuevo_color_docentes = "red" if sensor_state1D == 0 else "green"
        self.docentes_cajones[0].config(bg=nuevo_color_docentes)
        GPIO.output(Pin_Led1, GPIO.LOW if sensor_state1D == 0 else GPIO.HIGH)

        # Estado y color de los cajones de Estudiantes
        sensor_state2E = GPIO.input(Pin_Sensor2)
        nuevo_color_estudiantes_1 = "red" if sensor_state2E == 0 else "green"
        self.estudiantes_cajones[0].config(bg=nuevo_color_estudiantes_1)
        GPIO.output(Pin_Led2, GPIO.LOW if sensor_state2E == 0 else GPIO.HIGH)

        sensor_state3E = GPIO.input(Pin_Sensor3)
        nuevo_color_estudiantes_2 = "red" if sensor_state3E == 0 else "green"
        self.estudiantes_cajones[1].config(bg=nuevo_color_estudiantes_2)
        GPIO.output(Pin_Led3, GPIO.LOW if sensor_state3E == 0 else GPIO.HIGH)

        # Estado y color del cajón de Administrativos
        sensor_state4A = GPIO.input(Pin_Sensor4)
        nuevo_color_administrativos = "red" if sensor_state4A == 0 else "green"
        self.administrativos_cajones[0].config(bg=nuevo_color_administrativos)
        GPIO.output(Pin_Led4, GPIO.LOW if sensor_state4A == 0 else GPIO.HIGH)
        
        self.root.after(1000, self.actualizar_cajones)  # Actualiza cada segundo

if __name__ == "__main__":
    root = tk.Tk()
    app = EstacionamientoGUI(root)
    root.mainloop()